#key: maxbipartite
#name: maximum bipartite matching
# --
bool bipartite_matching_connect(const l u, vvb& m, vl& to, vb& used) {
  for (size_t v = 0; v < to.size(); v++) {
    if (!m[u][v] || used[v]) continue;
    used[v] = true;
    if (to[v] == -1 || bipartite_matching_connect(to[v], m, to, used)) {
      to[v] = u;
      return true;
    }
  }
  return false; // return to; to get actual connections
}

// {A} => {B}, m[i][j] if A[i] -> B[j]
l bipartite_matching(vvb& m) {
  if (m.empty()) return 0;
  vl to(m[0].size(), -1);
  int result = 0;
  for (size_t u = 0; u < m.size(); u++) {
    vb used(to.size());
    if (bipartite_matching_connect(u, m, to, used)) result++;
  }
  return result;
}
