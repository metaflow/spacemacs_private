#key: rational
#name: rational numbers
# --
// requires 'gcd' and 'sign'
struct Rat {
  l a, b;
  bool operator < (Rat const& rhs) const {
    if (rhs.b == 0 and b == 0) {
      return a < rhs.a;
    }
    if (b == 0) return a < 0;
    if (rhs.b == 0) return rhs.a > 0;
    return a * rhs.b < rhs.a * b;
  }

  void set(l na, l nb) {
    a = na; b = nb;
    normalize();
  }

  void set(l na) {
    set(na, 1);
  }

  void normalize() {
    l g = gcd(abs(a), abs(b));
    assert(g);
    a /= g;
    b /= g;
    if (a == 0) b = 1;
    if (b == 0) a = sign(a);
    if (b < 0 and a != 0) {
      a = -a;
      b = -b;
    }
  }
};

ostream& operator << (ostream& s, const Rat& p) {
  s << p.a << " / " << p.b;
  return s;
}