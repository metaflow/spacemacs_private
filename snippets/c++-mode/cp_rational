#key: rational
#name: rational numbers
# --
// requires 'gcd' and 'sign'
// requires 'gcd' and 'sign'
struct R {
  l a, b; // a / b; +-1 / 0 is infinity
  R(): a(0), b(1) {}
  R(l x): a(x), b(1) {}
  R(l x, l y): a(x), b(y) {
    normalize();
  }
  R(const R& o): a(o.a), b(o.b) {}
  R(R&& o): R() { swap(*this, o); }
  friend void swap(R& x, R& y) {
    swap(x.a, y.a);
    swap(x.b, y.b);
  }
  R& operator = (R rhs) {
    swap(*this, rhs);
    return *this;
  }
  bool operator < (R const& rhs) const {
    if (rhs.b == 0 and b == 0) {
      return a < rhs.a;
    }
    if (b == 0) return a < 0;
    if (rhs.b == 0) return rhs.a > 0;
    return a * rhs.b < rhs.a * b;
  }

  bool operator == (R const& rhs) const {
    return a == rhs.a and b == rhs.b;
  }

  void normalize() {
    l g = gcd(abs(a), abs(b));
    // assert(g);
    a /= g;
    b /= g;
    if (a == 0) b = 1;
    if (b == 0) a = sign(a);
    if (b < 0 and a != 0) {
      a = -a;
      b = -b;
    }
  }

  R operator + (R const& rhs) const {
    if (b == 0 and rhs.b == 0) {
      assert(a == rhs.a);
      return *this;
    }
    return R(a * rhs.b + b * rhs.a, b * rhs.b);
  }

  R operator - (R const& rhs) const {
    if (b == 0 and rhs.b == 0) {
      assert(a != rhs.a);
      return *this;
    }
    return R(a * rhs.b - b * rhs.a, b * rhs.b);
  }

};

ostream& operator << (ostream& s, const R& p) {
  s << p.a;
  if (p.b != 1) s << " / " << p.b;
  return s;
}