#key: convex_hull
#name: convex hull
# --
// indexes of points of convex hull, ccw from bottom left point
vl convex_hull(vector<point>& p) {
  vl hull;
  l a = 0;
  l n = p.size();
  if (n < 2) return hull;
  F(i, 1, n) {
    if (p[i].y < p[a].y or (equal_double(p[i].y, p[a].y) and p[i].x < p[a].x)) {
      a = i;
    }
  }
  vector<tuple<double, point, l>> ang;
  F(i, 0, n) if (i != a) {
    ang.emplace_back(make_tuple(atan2(p[i].y - p[a].y, p[i].x - p[a].x), p[i], i));
  }
  sort(all(ang));
  hull.emplace_back(a);
  l b = get<2>(ang[0]);
  hull.emplace_back(b);
  F(i, 1, n - 1) {
    l c = get<2>(ang[i]);
    double r = (p[b] - p[a]) ^ (p[c] - p[b]);
    while (not equal_double(r, 0) and r < 0) {
      hull.pop_back();
      b = a;
      assert(hull.size() >= 2);
      a = hull[hull.size() - 2];
      r = (p[b] - p[a]) ^ (p[c] - p[b]);
    }
    if (equal_double(r, 0)) {
      if ((p[b] - p[a]) * (p[c] - p[b]) > 0) {
        b = c;
        hull.pop_back();
        hull.emplace_back(c);
      }
    } else {
      a = b;
      b = c;
      hull.emplace_back(c);
    }
  }
  return hull;
}