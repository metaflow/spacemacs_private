#key: maxflow
#name: maximum flow
# --
struct MaxFlow {  // require 'graph'
  l result_flow;
  vl age;
  vl back;
  vvl capacity;

  MaxFlow(Graph& g, l source, l sink) {
    result_flow = 0;
    age.resize(g.v);
    back.resize(g.v);
    capacity.resize(g.v);
    F(i, 0, g.v) {
      capacity[i].resize(g.adj[i].size());
      F(j, 0, g.adj[i].size()) capacity[i][j] = g.adj[i][j].capacity;
    }
    while (true) {
      fill(all(age), 0);
      fill(all(back), -1);
      queue<l> q;
      q.push(source); age[source] = 1;
      while (not (q.empty() || age[sink])) {
        l u = q.front(); q.pop();
        F(j, 0, g.adj[u].size()) {
          auto& e = g.adj[u][j];
          l v = e.to;
          if (age[v] || capacity[u][j] == 0) continue;
          back[v] = e.opposite;
          age[v] = age[u] + 1;
          q.push(v);
        }
      }
      if (age[sink] == 0) break; // unreachable
      for (auto& e : g.adj[sink]) {
        l u = e.to;
        if (age[u] != age[sink] - 1 or capacity[u][e.opposite] == 0) continue;
        vll path;
        path.emplace_back(u, e.opposite);
        while (back[u] != -1) {
          auto& uv = g.adj[u][back[u]];
          u = uv.to;
          path.emplace_back(u, uv.opposite);
        }
        // adjust path
        l d = INF;
        for (auto p : path) d = min(d, capacity[p.first][p.second]);
        for (auto p : path) {
          capacity[p.first][p.second] -= d;
          auto& t = g.adj[p.first][p.second];
          capacity[t.to][t.opposite] += d;
        }
        result_flow += d;
      }
    }
  }
};
