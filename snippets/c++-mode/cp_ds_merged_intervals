#key: intervals
#name: merging intervals set
# --
// intervals are inclusive [a, b]
// e.g. [1, 2] + [2, 3] -> [1, 3]
// [1, 4] - [2, 3] -> [1, 1], [4, 4]
// and find([4, 7]) -> ([1, 4], [5, 6], [7, 11])
class MergedIntervals {
private:
  struct cmp {
    bool operator() (const ll& a, const ll& b) {
      return a.second < b.first;
    };
  };
  set<ll, cmp> m;
  friend ostream& operator << (ostream& s, const MergedIntervals& v) {
    for (auto i = v.m.cbegin(); i != v.m.cend(); i++) {
      s << "[" << i->first << ", " << i->second << "] ";
    }
    return s;
  }
public:
  void add(l a, l b) {
    auto p = m.equal_range(make_pair(a, b));
    for (auto i = p.first; i != p.second; i++) {
      a = min(a, i->first);
      b = max(b, i->second);
    }
    m.erase(p.first, p.second);
    m.emplace(make_pair(a, b));
  }

  void remove(l a, l b) {
    auto p = m.equal_range(make_pair(a, b));
    vll r;
    for (auto i = p.first; i != p.second; i++) r.emplace_back(*i);
    m.erase(p.first, p.second);
    for (auto i : r) {
      if (i.first < a) {
        m.emplace(make_pair(i.first, min(a, i.second) - 1));
      }
      if (i.second > b) {
        m.emplace(make_pair(max(b, i.first) + 1, i.second));
      }
    }
  }

  // returns all intervals intersecting with [a,b]
  // may be outside of [a, b]
  vll find(l a, l b) {
    vll r;
    auto p = m.equal_range(make_pair(a, b));
    for (auto i = p.first; i != p.second; i++) r.emplace_back(*i);
    return r;
  }

  bool intersectsWith(l a, l b) {
    auto p = m.equal_range(make_pair(a, b));
    return p.first != p.second;
  }

  // all intervals ordered
  vll intervals() {
    vll r;
    r.insert(r.begin(), m.cbegin(), m.cend());
    return r;
  }
};
