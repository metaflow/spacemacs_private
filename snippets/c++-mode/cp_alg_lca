#key: lca
#name: LCA, binary uplift
# --
struct LCA {  // require 'graph'
  vvl up; // binary lift [i][j] jump of 2^i from j
  vl depth; // depth[root] = 0

  LCA(Graph& g, l root) {
    depth.resize(g.v);
    l k = 0;
    while ((1 << k) <= g.v) k++;
    up.resize(k, vl(g.v, -1));

    queue<l> q;
    q.emplace(root);
    depth[root] = 0;
    while (not q.empty()) {
      l a = q.front(); q.pop();
      for (auto e : g.adj[a]) {
        if (e.to == up[0][a]) continue;
        up[0][e.to] = a;
        depth[e.to] = depth[a] + 1;
        build_up(e.to);
        q.emplace(e.to);
      }
    }
  }

  void build_up(l a) {
    F(i, 1, up.size()) {
      l t = up[i - 1][up[i - 1][a]];
      if (t == -1) break;
      up[i][a] = t;
    }
  }

  l walk(l a, l d) {  // walks up d levels
    l k = 0;
    while (d > 0) {
      if (d % 2) a = up[k][a];
      d /= 2;
      k++;
    }
    return a;
  }

  l lca(l a, l b) {
    if (depth[a] < depth[b]) swap(a, b);
    a = walk(a, depth[a] - depth[b]);
    if (a == b) return a;
    B(i, 0, up.size()) {
      if (up[i][a] != up[i][b]) {
        a = up[i][a];
        b = up[i][b];
      }
    }
    a = up[0][a];
    return a;
  }
};