#key: bicomponents
#name: graph biconnected components, bridges and articulation points
# --
struct BiComponents {
  l time;
  vl age, lowlink;
  vb in_path, explored_edge, cut_vertex, bridge;
  stack<Edge> edge_stack;
  vector<vector<Edge>> component; // 2-vertex-connected components

  BiComponents(Graph& g) {
    time = 0;
    age.resize(g.v);
    lowlink.resize(g.v);
    in_path.resize(g.v);
    cut_vertex.resize(g.v);

    explored_edge.resize(g.e);
    bridge.resize(g.e);

    F(i, 0, g.v) {
      if (age[i] == 0) dfs_components(i, g.e, g);
    }
  }

  // edge #id ->a
  void dfs_components(l a, l edge_id, Graph& g) {
    time++;
    in_path[a] = true;
    lowlink[a] = age[a] = time;
    l forward_count = 0;
    bool root = edge_id == g.e;
    for (auto e : g.adj[a]) {
      if (e.id == edge_id) continue;  // same edge
      if (not explored_edge[e.id]) {
        explored_edge[e.id] = true;
        edge_stack.push(e);
      }
      if (age[e.to]) { // visited
        if (in_path[e.to]) { // back edge
          lowlink[a] = min(lowlink[a], age[e.to]);
        }
      } else { // forward edge
        dfs_components(e.to, e.id, g);
        lowlink[a] = min(lowlink[a], lowlink[e.to]);
        bridge[e.id] = lowlink[e.to] == age[e.to];
        if (root ? (++forward_count > 1) : (lowlink[e.to] >= age[a])) {
          cut_vertex[a] = true; // articulation point
          // extract component
          vector<Edge> c;
          while (1) {
            auto t = edge_stack.top(); edge_stack.pop();
            c.emplace_back(t);
            if (t.id == e.id) break;
          }
          component.emplace_back(c);
        }
      }
    }
    if (root) {
      if (not edge_stack.empty()) {
        vector<Edge> c;
        while (not edge_stack.empty()) {
          auto t = edge_stack.top(); edge_stack.pop();
          c.emplace_back(t);
        }
        component.emplace_back(c);
      }
    }
    in_path[a] = false;
  }
};