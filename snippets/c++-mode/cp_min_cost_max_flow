#key: min cost max flow
#name: find min-cost max-flow in directed graph with no negative cycles
# --
struct MinCostMaxFlow { // require 'graph'
  vl potential;
  vl back; // index of edge back to source
  vvl capacity, cost; // mutable copies for every edge
  l result_cost, result_flow;

  void sssp(Graph& g, l source) {
    fill(all(potential), INF);
    fill(all(back), -1);
    vb in_queue(g.v);
    queue<l> q;
    potential[source] = 0;
    in_queue[source] = true;
    q.emplace(source);
    while (!q.empty()) {
      l u = q.front(); q.pop();
      in_queue[u] = false;
      F(i, 0, g.adj[u].size()) {
        auto& e = g.adj[u][i];
        if (capacity[u][i] == 0) continue;
        l v = e.to;
        l t = potential[u] + cost[u][i];
        if (t >= potential[v]) continue;
        potential[v] = t;
        back[v] = e.opposite;
        if (in_queue[v]) continue;
        in_queue[v] = true;
        q.emplace(v);
      }
    }
    // update costs
    F(i, 0, g.v) {
      F(j, 0, g.adj[i].size()) {
        if (capacity[i][j] == 0) continue;
        cost[i][j] += potential[g.adj[i][j].from] - potential[g.adj[i][j].to];
      }
    }
  }

  MinCostMaxFlow(Graph& g, l s, l t, l max_allowed_cost) {
    result_cost = 0;
    result_flow = 0;
    cost.resize(g.v);
    capacity.resize(g.v);
    potential.resize(g.v);
    back.resize(g.v);
    F(i, 0, g.v) {
      cost[i].resize(g.adj[i].size());
      capacity[i].resize(g.adj[i].size());
      F(j, 0, cost[i].size()) {
        cost[i][j] = g.adj[i][j].cost;
        capacity[i][j] = g.adj[i][j].capacity;
      }
    }
    while (max_allowed_cost >= 0) {
      sssp(g, s);
      if (potential[t] == INF) break;
      // augment
      stack<l> path; // from s -> t, idexes of edges
      l m = INF;
      auto u = t;
      while (back[u] != -1) {
        auto& ba = g.adj[u][back[u]];
        u = ba.to;
        path.push(ba.opposite);
        m = min(m, capacity[u][ba.opposite]);
      }
      // <- u == s
      while (!path.empty()) {
        auto e = path.top(); path.pop();
        max_allowed_cost -= m * g.adj[u][e].cost;
        if (max_allowed_cost < 0) break;
        capacity[u][e] -= m;
        l v = g.adj[u][e].to;
        l vu = g.adj[u][e].opposite;
        capacity[v][vu] += m;
        u = v;
      }
      if (max_allowed_cost >= 0) result_flow += m;
    }
    F(i, 0, g.v) {
      F(j, 0, g.adj[i].size()) {
        result_cost += (g.adj[i][j].capacity - capacity[i][j]) * g.adj[i][j].cost;
      }
    }
  }
};